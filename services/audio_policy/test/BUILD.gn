# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("../../../accessibility.gni")
import("../../../appgallery.gni")
import("../../../av_session.gni")
import("../../../bluetooth_part.gni")
import("../../../config.gni")

group("audio_policy_unittest_packages") {
  testonly = true
  deps = [
    ":audio_a2dp_offload_manager_unit_test",
    ":audio_active_device_unit_test",
    ":audio_affinity_manager_unit_test",
    ":audio_affinity_parser_test",
    ":audio_client_tracker_callback_proxy_unit_test",
    ":audio_client_tracker_callback_stub_unit_test",
    ":audio_concurrency_service_unit_test",
    ":audio_connected_device_unit_test",
    ":audio_device_common_unit_test",
    ":audio_device_lock_unit_test",
    ":audio_device_status_unit_test",
    ":audio_ec_manager_unit_test",
    ":audio_effect_config_parser_test",
    ":audio_effect_config_parser_unit_test",
    ":audio_effect_service_test",
    ":audio_general_manager_unit_test",
    ":audio_global_config_manager_test",
    ":audio_input_thread_unit_test",
    ":audio_interrupt_service_unit_test",
    ":audio_offload_stream_unit_test",
    ":audio_pnp_server_unit_test",
    ":audio_policy_async_action_handler_test",
    ":audio_policy_client_proxy_unit_test",
    ":audio_policy_client_stub_impl_test",
    ":audio_policy_manager_stub_test",
    ":audio_policy_manager_unit_test",
    ":audio_policy_server_handler_unit_test",
    ":audio_policy_server_unit_test",
    ":audio_policy_service_first_unit_test",
    ":audio_policy_service_second_unit_test",
    ":audio_policy_service_third_unit_test",
    ":audio_policy_service_thirdext_unit_test",
    ":audio_policy_state_monitor_test",
    ":audio_recovery_device_unit_test",
    ":audio_router_center_unit_test",
    ":audio_routing_manager_listener_stub_unit_test",
    ":audio_session_service_unit_test",
    ":audio_session_state_monitor_test",
    ":audio_session_unit_test",
    ":audio_socket_thread_unit_test",
    ":audio_spatialization_service_unit_test",
    ":audio_stream_collector_unit_test",
    ":audio_tone_parser_unit_test",
    ":audio_usb_manager_unit_test",
    ":audio_volume_manager_unit_test",
    ":device_status_listener_unit_test",
    ":power_state_listener_unit_test",
    ":privacy_priority_router_unit_test",
    ":stream_filter_router_unit_test",
    ":volume_data_maintainer_unit_test",
  ]
}

module_output_path = "multimedia_audio_framework/audio_policy"
module_output_path1 = "multimedia_audio_framework/service/audio_policy"

ohos_unittest("audio_interrupt_service_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/audio_interrupt_service_test/include",
    "../../audio_policy/server/src/service/interrupt",
    "../../audio_policy/server/include/service/listener",
    "../../audio_service/common/include/dfx",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  public_external_deps = [ "ffrt:libffrt" ]

  public_external_deps += [
    "libxml2:libxml2",
    "openssl:libcrypto_shared",
  ]

  sources = [
    "./unittest/audio_interrupt_service_test/src/audio_interrupt_unit_test.cpp",
  ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]

  configs = [ "../../../services/audio_policy:audio_policy_public_config" ]

  defines = []

  if (build_variant == "user") {
    defines += [ "AUDIO_BUILD_VARIANT_USER" ]
  } else if (build_variant == "root") {
    defines += [ "AUDIO_BUILD_VARIANT_ROOT" ]
  }

  if (use_libfuzzer || use_clang_coverage) {
    defines += [ "TEST_COVERAGE" ]
  }

  if (audio_framework_feature_support_os_account) {
    defines += [ "SUPPORT_USER_ACCOUNT" ]
  }

  if (audio_framework_feature_dtmf_tone) {
    defines += [ "FEATURE_DTMF_TONE" ]
  }

  if (audio_framework_feature_usb_audio) {
    defines += [ "USB_ENABLE" ]
    external_deps += [ "usb_manager:usbsrv_client" ]
  }

  if (audio_framework_config_policy_enable) {
    defines += [ "USE_CONFIG_POLICY" ]
    external_deps += [ "config_policy:configpolicy_util" ]
  }

  if (appgallery_part_enable == true) {
    defines += [ "FEATURE_APPGALLERY" ]
  }

  if (bluetooth_part_enable == true) {
    deps +=
        [ "../../../frameworks/native/bluetoothclient:audio_bluetooth_client" ]
    external_deps += [ "bluetooth:btframework" ]
  }

  if (avsession_part_enable == true) {
    external_deps += [
      "ability_base:want",
      "ability_runtime:wantagent_innerkits",
      "av_session:avsession_client",
      "input:libmmi-client",
    ]
  }

  if (audio_framework_feature_input) {
    defines += [ "FEATURE_MULTIMODALINPUT_INPUT" ]
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    defines += [ "FEATURE_DEVICE_MANAGER" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
  }

  if (accessibility_enable == true) {
    cflags += [ "-DACCESSIBILITY_ENABLE" ]
  }

  if (bluetooth_part_enable == true) {
    cflags += [ "-DBLUETOOTH_ENABLE" ]
  }

  if (avsession_part_enable == true) {
    cflags += [ "-DAVSESSION_ENABLE" ]
  }
}

ohos_unittest("audio_policy_service_first_unit_test") {
  module_out_path = module_output_path1
  include_dirs = [
    "./unittest/audio_policy_service_unit_test/include",
    "../../audio_policy/server/include/service",
    "../../audio_policy/server/include/service/service",
    "../../audio_policy/server/include",
    "../../audio_policy/server/include/service/listener",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken_shared",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  public_external_deps = [ "ffrt:libffrt" ]

  public_external_deps += [
    "libxml2:libxml2",
    "openssl:libcrypto_shared",
  ]

  sources = [
    "./unittest/audio_policy_service_unit_test/src/audio_policy_service_first_unit_test.cpp",
    "./unittest/audio_policy_service_unit_test/src/get_server_util.cpp",
  ]

  configs = [ "../../../services/audio_policy:audio_policy_public_config" ]

  deps = [
    "../../../services/audio_policy:audio_policy_client",
    "../../audio_policy:audio_policy_service_static",
    "../../audio_service:audio_client",
  ]

  if (accessibility_enable == true) {
    external_deps += [
      "accessibility:accessibility_common",
      "accessibility:accessibilityconfig",
    ]
  }

  defines = []

  if (build_variant == "user") {
    defines += [ "AUDIO_BUILD_VARIANT_USER" ]
  } else if (build_variant == "root") {
    defines += [ "AUDIO_BUILD_VARIANT_ROOT" ]
  }

  if (use_libfuzzer || use_clang_coverage) {
    defines += [ "TEST_COVERAGE" ]
  }

  if (audio_framework_feature_support_os_account) {
    defines += [ "SUPPORT_USER_ACCOUNT" ]
  }

  if (audio_framework_feature_dtmf_tone) {
    defines += [ "FEATURE_DTMF_TONE" ]
  }

  if (audio_framework_feature_usb_audio) {
    defines += [ "USB_ENABLE" ]
    external_deps += [ "usb_manager:usbsrv_client" ]
  }

  if (audio_framework_config_policy_enable) {
    defines += [ "USE_CONFIG_POLICY" ]
    external_deps += [ "config_policy:configpolicy_util" ]
  }

  if (appgallery_part_enable == true) {
    defines += [ "FEATURE_APPGALLERY" ]
  }

  if (bluetooth_part_enable == true) {
    deps +=
        [ "../../../frameworks/native/bluetoothclient:audio_bluetooth_client" ]
    external_deps += [ "bluetooth:btframework" ]
  }

  if (audio_framework_feature_wired_audio) {
    defines += [ "AUDIO_WIRED_DETECT" ]
  }

  if (audio_framework_feature_inner_capturer) {
    defines += [ "HAS_FEATURE_INNERCAPTURER" ]
  }

  if (audio_framework_feature_offline_effect) {
    defines += [ "FEATURE_OFFLINE_EFFECT" ]
  }

  if (audio_framework_feature_distributed_audio) {
    defines += [ "FEATURE_DISTRIBUTE_AUDIO" ]
  }

  if (audio_framework_feature_file_io == true) {
    defines += [ "FEATURE_FILE_IO" ]
  }

  if (audio_framework_feature_low_latency) {
    defines += [ "SUPPORT_LOW_LATENCY" ]
  }

  if (avsession_part_enable == true) {
    external_deps += [
      "ability_base:want",
      "ability_runtime:wantagent_innerkits",
      "av_session:avsession_client",
      "input:libmmi-client",
    ]
  }

  if (audio_framework_feature_input) {
    defines += [ "FEATURE_MULTIMODALINPUT_INPUT" ]
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    defines += [ "FEATURE_DEVICE_MANAGER" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
  }

  if (accessibility_enable == true) {
    cflags += [ "-DACCESSIBILITY_ENABLE" ]
  }

  if (bluetooth_part_enable == true) {
    cflags += [ "-DBLUETOOTH_ENABLE" ]
  }

  if (avsession_part_enable == true) {
    cflags += [ "-DAVSESSION_ENABLE" ]
  }
}

ohos_unittest("audio_policy_service_second_unit_test") {
  module_out_path = module_output_path1
  include_dirs = [
    "./unittest/audio_policy_service_unit_test/include",
    "../../audio_policy/server/include/service",
    "../../audio_policy/server/include/service/listener",
    "../../audio_policy/server/include/service/service",
    "../../audio_policy/server/include",
    "../../audio_policy/client/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken_shared",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  public_external_deps = [ "ffrt:libffrt" ]

  public_external_deps += [
    "libxml2:libxml2",
    "openssl:libcrypto_shared",
  ]

  sources = [
    "../../audio_policy/client/src/audio_client_tracker_callback_stub.cpp",
    "./unittest/audio_policy_service_unit_test/src/audio_policy_service_second_unit_test.cpp",
    "./unittest/audio_policy_service_unit_test/src/get_server_util.cpp",
  ]

  configs = [ "../../../services/audio_policy:audio_policy_public_config" ]

  deps = [
    "../../audio_policy:audio_policy_client",
    "../../audio_policy:audio_policy_service_static",
    "../../audio_service:audio_client",
  ]

  if (accessibility_enable == true) {
    external_deps += [
      "accessibility:accessibility_common",
      "accessibility:accessibilityconfig",
    ]
  }

  defines = [ "BLUETOOTH_ENABLE" ]

  if (build_variant == "user") {
    defines += [ "AUDIO_BUILD_VARIANT_USER" ]
  } else if (build_variant == "root") {
    defines += [ "AUDIO_BUILD_VARIANT_ROOT" ]
  }

  if (use_libfuzzer || use_clang_coverage) {
    defines += [ "TEST_COVERAGE" ]
  }

  if (audio_framework_feature_support_os_account) {
    defines += [ "SUPPORT_USER_ACCOUNT" ]
  }

  if (audio_framework_feature_dtmf_tone) {
    defines += [ "FEATURE_DTMF_TONE" ]
  }

  if (audio_framework_feature_usb_audio) {
    defines += [ "USB_ENABLE" ]
    external_deps += [ "usb_manager:usbsrv_client" ]
  }

  if (audio_framework_config_policy_enable) {
    defines += [ "USE_CONFIG_POLICY" ]
    external_deps += [ "config_policy:configpolicy_util" ]
  }

  if (appgallery_part_enable == true) {
    defines += [ "FEATURE_APPGALLERY" ]
  }

  if (bluetooth_part_enable == true) {
    deps +=
        [ "../../../frameworks/native/bluetoothclient:audio_bluetooth_client" ]
    external_deps += [ "bluetooth:btframework" ]
  }

  if (audio_framework_feature_wired_audio) {
    defines += [ "AUDIO_WIRED_DETECT" ]
  }

  if (audio_framework_feature_inner_capturer) {
    defines += [ "HAS_FEATURE_INNERCAPTURER" ]
  }

  if (audio_framework_feature_offline_effect) {
    defines += [ "FEATURE_OFFLINE_EFFECT" ]
  }

  if (audio_framework_feature_distributed_audio) {
    defines += [ "FEATURE_DISTRIBUTE_AUDIO" ]
  }

  if (audio_framework_feature_file_io == true) {
    defines += [ "FEATURE_FILE_IO" ]
  }

  if (audio_framework_feature_low_latency) {
    defines += [ "SUPPORT_LOW_LATENCY" ]
  }

  if (avsession_part_enable == true) {
    external_deps += [
      "ability_base:want",
      "ability_runtime:wantagent_innerkits",
      "av_session:avsession_client",
      "input:libmmi-client",
    ]
  }

  if (audio_framework_feature_input) {
    defines += [ "FEATURE_MULTIMODALINPUT_INPUT" ]
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    defines += [ "FEATURE_DEVICE_MANAGER" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
  }

  if (accessibility_enable == true) {
    cflags += [ "-DACCESSIBILITY_ENABLE" ]
  }

  if (bluetooth_part_enable == true) {
    cflags += [ "-DBLUETOOTH_ENABLE" ]
  }

  if (avsession_part_enable == true) {
    cflags += [ "-DAVSESSION_ENABLE" ]
  }
}

ohos_unittest("audio_policy_service_third_unit_test") {
  module_out_path = module_output_path1
  include_dirs = [
    "./unittest/audio_policy_service_unit_test/include",
    "../../audio_policy/server/include/service",
    "../../audio_policy/server/include/service/listener",
    "../../audio_policy/server/include/service/service",
    "../../audio_policy/server/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken_shared",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  public_external_deps = [ "ffrt:libffrt" ]

  public_external_deps += [
    "libxml2:libxml2",
    "openssl:libcrypto_shared",
  ]

  sources = [
    "./unittest/audio_policy_service_unit_test/src/audio_policy_service_third_unit_test.cpp",
    "./unittest/audio_policy_service_unit_test/src/get_server_util.cpp",
  ]

  configs = [ "../../../services/audio_policy:audio_policy_public_config" ]

  deps = [
    "../../../services/audio_policy:audio_policy_client",
    "../../audio_policy:audio_policy_service_static",
    "../../audio_service:audio_client",
  ]

  if (accessibility_enable == true) {
    external_deps += [
      "accessibility:accessibility_common",
      "accessibility:accessibilityconfig",
    ]
  }

  defines = []

  if (build_variant == "user") {
    defines += [ "AUDIO_BUILD_VARIANT_USER" ]
  } else if (build_variant == "root") {
    defines += [ "AUDIO_BUILD_VARIANT_ROOT" ]
  }

  if (use_libfuzzer || use_clang_coverage) {
    defines += [ "TEST_COVERAGE" ]
  }

  if (audio_framework_feature_support_os_account) {
    defines += [ "SUPPORT_USER_ACCOUNT" ]
  }

  if (audio_framework_feature_dtmf_tone) {
    defines += [ "FEATURE_DTMF_TONE" ]
  }

  if (audio_framework_feature_usb_audio) {
    defines += [ "USB_ENABLE" ]
    external_deps += [ "usb_manager:usbsrv_client" ]
  }

  if (audio_framework_config_policy_enable) {
    defines += [ "USE_CONFIG_POLICY" ]
    external_deps += [ "config_policy:configpolicy_util" ]
  }

  if (appgallery_part_enable == true) {
    defines += [ "FEATURE_APPGALLERY" ]
  }

  if (bluetooth_part_enable == true) {
    deps +=
        [ "../../../frameworks/native/bluetoothclient:audio_bluetooth_client" ]
    external_deps += [ "bluetooth:btframework" ]
  }

  if (audio_framework_feature_wired_audio) {
    defines += [ "AUDIO_WIRED_DETECT" ]
  }

  if (audio_framework_feature_inner_capturer) {
    defines += [ "HAS_FEATURE_INNERCAPTURER" ]
  }

  if (audio_framework_feature_offline_effect) {
    defines += [ "FEATURE_OFFLINE_EFFECT" ]
  }

  if (audio_framework_feature_distributed_audio) {
    defines += [ "FEATURE_DISTRIBUTE_AUDIO" ]
  }

  if (audio_framework_feature_file_io == true) {
    defines += [ "FEATURE_FILE_IO" ]
  }

  if (audio_framework_feature_low_latency) {
    defines += [ "SUPPORT_LOW_LATENCY" ]
  }

  if (avsession_part_enable == true) {
    external_deps += [
      "ability_base:want",
      "ability_runtime:wantagent_innerkits",
      "av_session:avsession_client",
      "input:libmmi-client",
    ]
  }

  if (audio_framework_feature_input) {
    defines += [ "FEATURE_MULTIMODALINPUT_INPUT" ]
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    defines += [ "FEATURE_DEVICE_MANAGER" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
  }

  if (accessibility_enable == true) {
    cflags += [ "-DACCESSIBILITY_ENABLE" ]
  }

  if (bluetooth_part_enable == true) {
    cflags += [ "-DBLUETOOTH_ENABLE" ]
  }

  if (avsession_part_enable == true) {
    cflags += [ "-DAVSESSION_ENABLE" ]
  }
}

ohos_unittest("audio_policy_service_thirdext_unit_test") {
  module_out_path = module_output_path1
  include_dirs = [
    "./unittest/audio_policy_service_unit_test/include",
    "../../audio_service/common/include/dfx",
    "../../audio_policy/server/include/service",
    "../../audio_policy/server/include/service/listener",
    "../../audio_policy/server/include/service/service",
    "../../audio_policy/server/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken_shared",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  public_external_deps = [ "ffrt:libffrt" ]

  public_external_deps += [
    "libxml2:libxml2",
    "openssl:libcrypto_shared",
  ]

  sources = [
    "./unittest/audio_policy_service_unit_test/src/audio_policy_service_thirdext_unit_test.cpp",
    "./unittest/audio_policy_service_unit_test/src/get_server_util.cpp",
  ]

  configs = [ "../../../services/audio_policy:audio_policy_public_config" ]

  deps = [
    "../../../services/audio_policy:audio_policy_client",
    "../../audio_policy:audio_policy_service_static",
    "../../audio_service:audio_client",
  ]

  if (accessibility_enable == true) {
    external_deps += [
      "accessibility:accessibility_common",
      "accessibility:accessibilityconfig",
    ]
  }

  defines = []

  if (build_variant == "user") {
    defines += [ "AUDIO_BUILD_VARIANT_USER" ]
  } else if (build_variant == "root") {
    defines += [ "AUDIO_BUILD_VARIANT_ROOT" ]
  }

  if (use_libfuzzer || use_clang_coverage) {
    defines += [ "TEST_COVERAGE" ]
  }

  if (audio_framework_feature_support_os_account) {
    defines += [ "SUPPORT_USER_ACCOUNT" ]
  }

  if (audio_framework_feature_dtmf_tone) {
    defines += [ "FEATURE_DTMF_TONE" ]
  }

  if (audio_framework_feature_usb_audio) {
    defines += [ "USB_ENABLE" ]
    external_deps += [ "usb_manager:usbsrv_client" ]
  }

  if (audio_framework_config_policy_enable) {
    defines += [ "USE_CONFIG_POLICY" ]
    external_deps += [ "config_policy:configpolicy_util" ]
  }

  if (appgallery_part_enable == true) {
    defines += [ "FEATURE_APPGALLERY" ]
  }

  if (bluetooth_part_enable == true) {
    deps +=
        [ "../../../frameworks/native/bluetoothclient:audio_bluetooth_client" ]
    external_deps += [ "bluetooth:btframework" ]
  }

  if (audio_framework_feature_wired_audio) {
    defines += [ "AUDIO_WIRED_DETECT" ]
  }

  if (audio_framework_feature_inner_capturer) {
    defines += [ "HAS_FEATURE_INNERCAPTURER" ]
  }

  if (audio_framework_feature_offline_effect) {
    defines += [ "FEATURE_OFFLINE_EFFECT" ]
  }

  if (audio_framework_feature_distributed_audio) {
    defines += [ "FEATURE_DISTRIBUTE_AUDIO" ]
  }

  if (audio_framework_feature_file_io == true) {
    defines += [ "FEATURE_FILE_IO" ]
  }

  if (audio_framework_feature_low_latency) {
    defines += [ "SUPPORT_LOW_LATENCY" ]
  }

  if (avsession_part_enable == true) {
    external_deps += [
      "ability_base:want",
      "ability_runtime:wantagent_innerkits",
      "av_session:avsession_client",
      "input:libmmi-client",
    ]
  }

  if (audio_framework_feature_input) {
    defines += [ "FEATURE_MULTIMODALINPUT_INPUT" ]
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    defines += [ "FEATURE_DEVICE_MANAGER" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
  }

  if (accessibility_enable == true) {
    cflags += [ "-DACCESSIBILITY_ENABLE" ]
  }

  if (bluetooth_part_enable == true) {
    cflags += [ "-DBLUETOOTH_ENABLE" ]
  }

  if (avsession_part_enable == true) {
    cflags += [ "-DAVSESSION_ENABLE" ]
  }
}

ohos_unittest("audio_effect_config_parser_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/audio_effect_config_parser_test/include",
    "../../audio_policy/server/include/service/effect",
  ]

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "bounds_checking_function:libsec_shared",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "init:libbegetutil",
    "libxml2:libxml2",
  ]

  sources = [ "./unittest/audio_effect_config_parser_test/src/audio_effect_config_parser_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_pnp_server_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/audio_pnp_server_unit_test/include",
    "../../audio_policy/server/include/service/effect",
  ]

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [
    "../../audio_policy/server/src/service/manager/pnp_server/audio_pnp_server.cpp",
    "../../audio_policy/server/src/service/manager/pnp_server/audio_socket_thread.cpp",
    "./unittest/audio_pnp_server_unit_test/src/audio_pnp_server_unit_test.cpp",
  ]

  deps = [ "../../audio_policy:audio_policy_service" ]
}

ohos_unittest("audio_socket_thread_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "./unittest/audio_socket_thread_test/include",
    "../../audio_policy/client/src",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (audio_framework_feature_wired_audio) {
    sources = [
      "./unittest/audio_socket_thread_test/src/audio_socket_thread_test.cpp",
    ]
  }

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_offload_stream_unit_test") {
  module_out_path = module_output_path1
  include_dirs = [
    "./unittest/audio_offload_stream_unit_test/include",
    "../../audio_policy/server/src/service/service",
    "../../audio_policy/server/include/service/service",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
  ]

  sources = [ "./unittest/audio_offload_stream_unit_test/src/audio_offload_stream_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]

  if (audio_framework_feature_dtmf_tone) {
    defines = [ "FEATURE_DTMF_TONE" ]
  }

  if (accessibility_enable == true) {
    external_deps += [
      "accessibility:accessibility_common",
      "accessibility:accessibilityconfig",
    ]
  }

  if (bluetooth_part_enable == true) {
    external_deps += [ "bluetooth:btframework" ]
  }

  if (audio_framework_feature_input) {
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    external_deps += [ "device_manager:devicemanagersdk" ]
  }
}

ohos_unittest("audio_policy_server_unit_test") {
  module_out_path = module_output_path1
  include_dirs = [
    "./unittest/audio_interrupt_service_test/include",
    "../../audio_policy/server/src/service/interrupt",
    "../../audio_policy/server/include/service/listener",
    "../../audio_policy/server/include",
    "../../audio_policy/test/unittest/audio_interrupt_service_test/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
  ]

  sources = [ "./unittest/audio_interrupt_service_test/src/audio_policy_server_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]

  defines = [ "BLUETOOTH_ENABLE" ]

  if (audio_framework_feature_dtmf_tone) {
    defines += [ "FEATURE_DTMF_TONE" ]
  }

  if (audio_framework_feature_input) {
    defines += [ "FEATURE_MULTIMODALINPUT_INPUT" ]
    external_deps += [ "input:libmmi-client" ]
  }

  if (accessibility_enable == true) {
    external_deps += [
      "accessibility:accessibility_common",
      "accessibility:accessibilityconfig",
    ]
  }

  if (bluetooth_part_enable == true) {
    external_deps += [ "bluetooth:btframework" ]
  }

  if (audio_framework_feature_input) {
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    external_deps += [ "device_manager:devicemanagersdk" ]
  }
}

ohos_unittest("audio_routing_manager_listener_stub_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/audio_routing_manager_listener_stub_unit_test/include",
    "../../audio_policy/client/include/",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_routing_manager_listener_stub_unit_test/src/audio_routing_manager_listener_stub_unit_test.cpp" ]

  deps = [
    "../../../frameworks/native/audioutils:audio_utils",
    "../../audio_policy:audio_policy_client_static",
  ]

  if (accessibility_enable == true) {
    external_deps += [
      "accessibility:accessibility_common",
      "accessibility:accessibilityconfig",
    ]
  }

  if (bluetooth_part_enable == true) {
    external_deps += [ "bluetooth:btframework" ]
  }

  if (audio_framework_feature_input) {
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    external_deps += [ "device_manager:devicemanagersdk" ]
  }
}

ohos_unittest("audio_policy_client_stub_impl_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/audio_policy_client_stub_impl_test/include",
    "../../audio_policy/client/include",
  ]

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "bounds_checking_function:libsec_shared",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_policy_client_stub_impl_test/src/audio_policy_client_stub_impl_test.cpp" ]

  deps = [
    "../../../frameworks/native/audioutils:audio_utils",
    "../../audio_policy:audio_policy_client_static",
  ]
}

ohos_unittest("audio_client_tracker_callback_stub_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/audio_client_tracker_callback_stub_unit_test/include",
    "../../audio_policy/client/include/",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_client_tracker_callback_stub_unit_test/src/audio_client_tracker_callback_stub_unit_test.cpp" ]

  deps = [
    "../../../frameworks/native/audioutils:audio_utils",
    "../../audio_policy:audio_policy_client_static",
  ]

  if (accessibility_enable == true) {
    external_deps += [
      "accessibility:accessibility_common",
      "accessibility:accessibilityconfig",
    ]
  }

  if (bluetooth_part_enable == true) {
    external_deps += [ "bluetooth:btframework" ]
  }

  if (audio_framework_feature_input) {
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    external_deps += [ "device_manager:devicemanagersdk" ]
  }
}

ohos_unittest("audio_spatialization_service_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/audio_spatialization_service_unit_test/include",
    "../../audio_policy/server/include/service/spatialization",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "googletest:gmock",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
  ]

  sources = [ "./unittest/audio_spatialization_service_unit_test/src/audio_spatialization_service_unit_test.cpp" ]

  deps = [
    "../../../frameworks/native/bluetoothclient:audio_bluetooth_client",
    "../../audio_policy:audio_policy_service_static",
    "../../audio_policy:audio_setting_provider",
  ]
}

ohos_unittest("stream_filter_router_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/stream_filter_router_unit_test/include",
    "../../audio_policy/server/include/service/routers",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/stream_filter_router_test/src/stream_filter_router_unit_test.cpp" ]

  deps = [
    "../../../frameworks/native/bluetoothclient:audio_bluetooth_client",
    "../../audio_policy:audio_policy_client",
    "../../audio_policy:audio_policy_service_static",
    "../../audio_service:audio_client",
    "../../audio_service:audio_common",
  ]

  if (accessibility_enable == true) {
    external_deps += [
      "accessibility:accessibility_common",
      "accessibility:accessibilityconfig",
    ]
  }

  defines = []
  if (audio_framework_feature_dtmf_tone) {
    defines += [ "FEATURE_DTMF_TONE" ]
  }

  if (audio_framework_feature_support_os_account) {
    defines += [ "SUPPORT_USER_ACCOUNT" ]
  }

  if (build_variant == "user") {
    defines += [ "AUDIO_BUILD_VARIANT_USER" ]
  } else if (build_variant == "root") {
    defines += [ "AUDIO_BUILD_VARIANT_ROOT" ]
  }

  if (appgallery_part_enable == true) {
    defines += [ "FEATURE_APPGALLERY" ]
  }

  if (bluetooth_part_enable == true) {
    external_deps += [ "bluetooth:btframework" ]
  }

  if (audio_framework_feature_input) {
    defines += [ "FEATURE_MULTIMODALINPUT_INPUT" ]
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    defines += [ "FEATURE_DEVICE_MANAGER" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
  }

  if (audio_framework_feature_usb_audio) {
    defines += [ "USB_ENABLE" ]
    external_deps += [ "usb_manager:usbsrv_client" ]
  }
}

ohos_unittest("audio_router_center_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/audio_router_center_unit_test/include",
    "../../audio_policy/server/include/service/routers",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_router_center_unit_test/src/audio_router_center_unit_test.cpp" ]

  deps = [
    "../../../frameworks/native/bluetoothclient:audio_bluetooth_client",
    "../../audio_policy:audio_policy_client",
    "../../audio_policy:audio_policy_service_static",
    "../../audio_service:audio_client",
    "../../audio_service:audio_common",
  ]

  if (accessibility_enable == true) {
    external_deps += [
      "accessibility:accessibility_common",
      "accessibility:accessibilityconfig",
    ]
  }

  defines = []
  if (audio_framework_feature_dtmf_tone) {
    defines += [ "FEATURE_DTMF_TONE" ]
  }

  if (audio_framework_feature_support_os_account) {
    defines += [ "SUPPORT_USER_ACCOUNT" ]
  }

  if (build_variant == "user") {
    defines += [ "AUDIO_BUILD_VARIANT_USER" ]
  } else if (build_variant == "root") {
    defines += [ "AUDIO_BUILD_VARIANT_ROOT" ]
  }

  if (appgallery_part_enable == true) {
    defines += [ "FEATURE_APPGALLERY" ]
  }

  if (bluetooth_part_enable == true) {
    external_deps += [ "bluetooth:btframework" ]
  }

  if (audio_framework_feature_input) {
    defines += [ "FEATURE_MULTIMODALINPUT_INPUT" ]
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    defines += [ "FEATURE_DEVICE_MANAGER" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
  }
}

ohos_unittest("privacy_priority_router_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/privacy_priority_router_unit_test/include",
    "../../audio_policy/server/include/service/routers",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/privacy_priority_router_unit_test/src/privacy_priority_router_unit_test.cpp" ]

  deps = [
    "../../../frameworks/native/bluetoothclient:audio_bluetooth_client",
    "../../audio_policy:audio_policy_client",
    "../../audio_policy:audio_policy_service_static",
    "../../audio_service:audio_client",
    "../../audio_service:audio_common",
  ]

  if (accessibility_enable == true) {
    external_deps += [
      "accessibility:accessibility_common",
      "accessibility:accessibilityconfig",
    ]
  }

  defines = []
  if (audio_framework_feature_dtmf_tone) {
    defines += [ "FEATURE_DTMF_TONE" ]
  }

  if (audio_framework_feature_support_os_account) {
    defines += [ "SUPPORT_USER_ACCOUNT" ]
  }

  if (build_variant == "user") {
    defines += [ "AUDIO_BUILD_VARIANT_USER" ]
  } else if (build_variant == "root") {
    defines += [ "AUDIO_BUILD_VARIANT_ROOT" ]
  }

  if (appgallery_part_enable == true) {
    defines += [ "FEATURE_APPGALLERY" ]
  }

  if (bluetooth_part_enable == true) {
    external_deps += [ "bluetooth:btframework" ]
  }

  if (audio_framework_feature_input) {
    defines += [ "FEATURE_MULTIMODALINPUT_INPUT" ]
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    defines += [ "FEATURE_DEVICE_MANAGER" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
  }
}

ohos_unittest("audio_affinity_parser_test") {
  module_out_path = module_output_path
  include_dirs = [
    "../server/include",
    "./unittest/audio_affinity_parser_test/include",
  ]

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [
    "./unittest/audio_affinity_parser_test/src/audio_affinity_parser_test.cpp",
  ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_global_config_manager_test") {
  module_out_path = module_output_path
  include_dirs = [
    "../server/include",
    "./unittest/audio_global_config_manager_test/include",
  ]

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_global_config_manager_test/src/audio_global_config_manager_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_session_state_monitor_test") {
  module_out_path = module_output_path
  include_dirs = [ "../server/include" ]

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]

  sources = [ "./unittest/audio_session_state_monitor_test/audio_session_state_monitor_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_policy_state_monitor_test") {
  module_out_path = module_output_path
  include_dirs = [ "../server/include" ]

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]

  sources = [ "./unittest/audio_policy_state_monitor_test/audio_policy_state_monitor_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_stream_collector_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "./unittest/audio_stream_collector_unit_test/include",
    "../../audio_policy/server/src",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_stream_collector_unit_test/src/audio_stream_collector_unit_test.cpp" ]

  deps = [
    "../../../frameworks/native/bluetoothclient:audio_bluetooth_client",
    "../../audio_policy:audio_policy_service_static",
    "../../audio_service:audio_client",
  ]
}

ohos_unittest("audio_effect_service_test") {
  module_out_path = module_output_path
  include_dirs = [
    "../server/include",
    "./unittest/audio_effect_service_test/include",
  ]

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "googletest:gtest",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [
    "./unittest/audio_effect_service_test/src/audio_effect_service_test.cpp",
  ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_policy_server_handler_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/audio_policy_server_handler_unit_test/include",
    "../../audio_policy/server/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
  ]

  sources = [ "./unittest/audio_policy_server_handler_test/src/audio_policy_server_handler_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]

  if (accessibility_enable == true) {
    external_deps += [
      "accessibility:accessibility_common",
      "accessibility:accessibilityconfig",
    ]
  }

  if (bluetooth_part_enable == true) {
    external_deps += [ "bluetooth:btframework" ]
  }

  if (audio_framework_feature_input) {
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    external_deps += [ "device_manager:devicemanagersdk" ]
  }
}

ohos_unittest("audio_policy_async_action_handler_test") {
  module_out_path = module_output_path

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]
  include_dirs = [
    "../../audio_policy/server/include",
    "../../../services/audio_service/common/include",
    "../../../services/audio_service/server/include",
    "../../../interfaces/inner_api/native/audiocommon/include",
    "../../../interfaces/inner_api/native/audiomanager/include",
    "../../../frameworks/native/audioinnercall/include",
    "../../../frameworks/native/audiopolicy/include",
    "../../../frameworks/native/hdiadapter_new/include",
  ]

  sources = [
    "../../../services/audio_policy/server/src/audio_policy_async_action_handler.cpp",
    "../../../services/audio_service/server/src/audio_manager_listener_proxy.cpp",
    "./unittest/audio_policy_async_action_handler_test/audio_policy_async_action_handler_test.cpp",
  ]

  deps = [
    "../../../frameworks/native/audioeffect:audio_effect",
    "../../../frameworks/native/audioschedule:audio_schedule",
    "../../../frameworks/native/audioutils:audio_utils",
    "../../../services/audio_policy:audio_policy_client",
    "../../../services/audio_policy:audio_policy_service",
    "../../../services/audio_service:audio_client",
    "../../../services/audio_service:audio_common",
    "../../../services/audio_service:audio_process_service",
    "../../../services/audio_service:audio_service",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("volume_data_maintainer_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "../../audio_policy/server/include/service/manager",
    "./unittest/volume_data_maintainer_unit_test/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  cflags += [ "--coverage" ]
  ldflags = [ "--coverage" ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "googletest:gtest",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/volume_data_maintainer_unit_test/src/volume_data_maintainer_unit_test.cpp" ]

  deps = [
    "../../../frameworks/native/bluetoothclient:audio_bluetooth_client",
    "../../audio_policy:audio_policy_service_static",
  ]
}

ohos_unittest("audio_policy_manager_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/audio_policy_manager_unit_test/include",
    "../../../../frameworks/native/audiopolicy/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "bounds_checking_function:libsec_shared",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_policy_manager_unit_test/src/audio_policy_manager_unit_test.cpp" ]

  deps = [
    "../../../frameworks/native/audioutils:audio_utils",
    "../../audio_policy:audio_policy_client_static",
  ]
}

ohos_unittest("audio_affinity_manager_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "./unittest/audio_affinity_manager_unit_test/include",
    "../../audio_policy/server/include/service/",
    "../../../interfaces/inner_api/native/audiomanager/include",
    "../../audio_service/client/src",
    "../../audio_policy/server/src/service/device",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_affinity_manager_unit_test/src/audio_affinity_manager_unit_test.cpp" ]

  deps = [
    "../../audio_policy:audio_foundation",
    "../../audio_policy:audio_policy_service_static",
  ]
}

ohos_unittest("audio_device_common_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "../../audio_policy/server/include/service/service",
    "./unittest/audio_device_common_unit_test/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_device_common_unit_test/src/audio_device_common_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_policy_manager_stub_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/audio_policy_manager_stub_unit_test/include",
    "../../audio_policy/server/include",
    "../../audio_policy/client/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
  ]

  sources = [ "./unittest/audio_policy_manager_stub_unit_test/src/audio_policy_manager_stub_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service" ]

  if (accessibility_enable == true) {
    external_deps += [
      "accessibility:accessibility_common",
      "accessibility:accessibilityconfig",
    ]
  }

  if (bluetooth_part_enable == true) {
    external_deps += [ "bluetooth:btframework" ]
  }

  if (audio_framework_feature_input) {
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    external_deps += [ "device_manager:devicemanagersdk" ]
  }
}

ohos_unittest("audio_effect_config_parser_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "./unittest/audio_effect_config_parser_unit_test/include",
    "../../audio_policy/server/include/service/effect",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_effect_config_parser_unit_test/src/audio_effect_config_parser_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_policy_manager_stub_test") {
  module_out_path = module_output_path
  include_dirs = [
    "../client/include",
    "./unittest/audio_policy_manager_stub_test/include",
    "../../audio_service/common/include/dfx",
    "../../audio_policy/server/include/service/listener",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_policy_manager_stub_test/src/audio_policy_manager_stub_test.cpp" ]
  deps = [
    "../../audio_policy:audio_policy_service_static",
    "../../audio_policy:audio_setting_provider",
  ]
}

ohos_unittest("device_status_listener_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "../client/include",
    "../../audio_policy/server/include/service/listener",
    "../../audio_policy/server/include/service",
    "./unittest/device_status_listener_unit_test/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/device_status_listener_unit_test/src/device_status_listener_unit_test.cpp" ]
  deps = [
    "../../audio_policy:audio_policy_service",
    "../../audio_policy:audio_policy_service_static",
    "../../audio_policy:audio_setting_provider",
  ]

  if (audio_framework_feature_wired_audio) {
    defines = [ "AUDIO_WIRED_DETECT" ]
  }
}

ohos_unittest("audio_ec_manager_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiocommon/include/",
    "../../audio_policy/server/include/service/service",
    "./unittest/audio_ec_manager_unit_test/include",
    "../../audio_policy/server/src/service/service",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "bluetooth:btframework",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
  ]

  sources = [
    "./unittest/audio_ec_manager_unit_test/src/audio_ec_manager_unit_test.cpp",
  ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_general_manager_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/audio_general_manager_unit_test/include",
    "../../../services/audio_policy/util/include",
    "../../../interfaces/inner_api/native/audiocommon/include",
    "../../../services/audio_policy/server/include/service/effect",
    "../../../interfaces/inner_api/native/audiomanager/include",
    "../../../services/audio_service/client/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "bounds_checking_function:libsec_shared",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_general_manager_unit_test/src/audio_general_manager_unit_test.cpp" ]

  deps = [
    "../../../services/audio_policy:audio_foundation",
    "../../../services/audio_policy:audio_manager_client",
  ]
}

ohos_unittest("audio_active_device_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "../server/include",
    "./unittest/audio_active_device_unit_test/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_active_device_unit_test/src/audio_active_device_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_a2dp_offload_manager_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "../server/include",
    "./unittest/audio_a2dp_offload_manager_unit_test/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  defines = [ "BLUETOOTH_ENABLE" ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_a2dp_offload_manager_unit_test/src/audio_a2dp_offload_manager_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_connected_device_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "../server/include",
    "./unittest/audio_connected_device_unit_test/include",
    "../../../frameworks/native/bluetoothclient",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/audio_connected_device_unit_test/src/audio_connected_device_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_volume_manager_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "../../audio_policy/server/include/service/service",
    "./unittest/audio_volume_manager_unit_test/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "bluetooth:btframework",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "googletest:gmock",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
  ]

  sources = [ "./unittest/audio_volume_manager_unit_test/src/audio_volume_manager_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_client_tracker_callback_proxy_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "./unittest/audio_client_tracker_callback_proxy_unit_test/include",
    "../../audio_policy/server/include",
    "../../audio_policy/client/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "bluetooth:btframework",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
  ]

  sources = [
    "../../audio_policy/client/src/audio_client_tracker_callback_stub.cpp",
    "../../audio_policy/server/src/audio_client_tracker_callback_proxy.cpp",
    "./unittest/audio_client_tracker_callback_proxy_unit_test/src/audio_client_tracker_callback_proxy_unit_test.cpp",
  ]

  deps = [
    "../../../services/audio_policy:audio_policy_client",
    "../../audio_policy:audio_policy_service",
  ]
}

ohos_unittest("audio_recovery_device_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "./unittest/audio_recovery_device_unit_test/include",
    "../../audio_policy/server/include/service/service",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "bluetooth:btframework",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
  ]

  sources = [ "./unittest/audio_recovery_device_unit_test/src/audio_recovery_device_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_input_thread_unit_test") {
  module_out_path = module_output_path

  include_dirs = [ "./unittest/audio_input_thread_unit_test/include" ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "bluetooth:btframework",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hilog:libhilog",
    "init:libbegetutil",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
  ]

  sources = [ "./unittest/audio_input_thread_unit_test/src/audio_input_thread_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_concurrency_service_unit_test") {
  module_out_path = module_output_path

  include_dirs = [ "./unittest/audio_concurrency_service_unit_test/include" ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "bluetooth:btframework",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
  ]

  sources = [ "./unittest/audio_concurrency_service_unit_test/src/audio_concurrency_service_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_device_status_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiocommon/include/",
    "../../audio_policy/server/include/service/service",
    "./unittest/audio_device_status_unit_test/include",
    "../../audio_policy/server/src/service/service",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "bluetooth:btframework",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
  ]

  sources = [ "./unittest/audio_device_status_unit_test/src/audio_device_status_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_policy_client_proxy_unit_test") {
  module_out_path = module_output_path

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  sources = [
    "../../../services/audio_policy/server/src/audio_policy_client_proxy.cpp",
    "../../../services/audio_policy/server/src/service/device/audio_device_descriptor.cpp",
    "./unittest/audio_policy_client_proxy_unit_test/src/audio_policy_client_proxy_unit_test.cpp",
  ]

  include_dirs = [
    "./unittest/audio_policy_client_proxy_unit_test/include",
    "../../audio_policy/server/include",
    "../../../services/audio_service/common/include",
    "../../../services/audio_service/server/include",
    "../../../interfaces/inner_api/native/audiocommon/include",
    "../../../interfaces/inner_api/native/audiomanager/include",
    "../../../frameworks/native/audioinnercall/include",
    "../../../frameworks/native/audiopolicy/include",
    "../../../frameworks/native/hdiadapter_new/include",
  ]

  deps = [
    "../../../frameworks/native/audioeffect:audio_effect",
    "../../../frameworks/native/audioschedule:audio_schedule",
    "../../../frameworks/native/audioutils:audio_utils",
    "../../../services/audio_policy:audio_policy_client",
    "../../../services/audio_policy:audio_policy_service",
    "../../../services/audio_service:audio_client",
    "../../../services/audio_service:audio_common",
    "../../../services/audio_service:audio_process_service",
    "../../../services/audio_service:audio_service",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("audio_device_lock_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "./unittest/audio_device_lock_unit_test/include",
    "../../audio_policy/server/include",
    "../../audio_policy/client/include",
    "../../audio_policy/server/include/service/service",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "bluetooth:btframework",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
  ]

  sources = [ "./unittest/audio_device_lock_unit_test/src/audio_device_lock_unit_test.cpp" ]

  deps = [
    "../../../services/audio_policy:audio_policy_client_static",
    "../../audio_policy:audio_policy_service_static",
  ]

  defines = [ "BLUETOOTH_ENABLE" ]
}

ohos_unittest("power_state_listener_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "./unittest/power_state_listener_unit_test/include",
    "../../audio_policy/server/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "eventhandler:libeventhandler",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "pulseaudio:pulse",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/power_state_listener_unit_test/src/power_state_listener_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_usb_manager_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "./unittest/audio_usb_manager_unit_test/include",
    "../../server/include",
    "../../../services/audio_policy/server/include/service/manager",
    "../../../interfaces/inner_api/native/audiocommon/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_common",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "init:libbegetutil",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "safwk:system_ability_fwk",
  ]

  sources = [
    "../../../services/audio_policy/server/src/audio_policy_client_proxy.cpp",
    "../../../services/audio_policy/server/src/service/device/audio_device_descriptor.cpp",
    "../../../services/audio_policy/server/src/service/manager/audio_usb_manager.cpp",
    "./unittest/audio_usb_manager_unit_test/src/audio_usb_manager_unit_test.cpp",
  ]

  deps = [
    "../../../frameworks/native/audioeffect:audio_effect",
    "../../../frameworks/native/audioschedule:audio_schedule",
    "../../../frameworks/native/audioutils:audio_utils",
    "../../../services/audio_policy:audio_policy_client",
    "../../../services/audio_policy:audio_policy_service",
    "../../../services/audio_service:audio_client",
    "../../../services/audio_service:audio_common",
    "../../../services/audio_service:audio_process_service",
    "../../../services/audio_service:audio_service",
  ]
  defines = []
  if (audio_framework_feature_usb_audio) {
    defines += [ "USB_ENABLE" ]
    external_deps += [ "usb_manager:usbsrv_client" ]
  }
}

ohos_unittest("audio_session_unit_test") {
  module_out_path = module_output_path

  include_dirs = [ "./unittest/audio_session_unit_test/include" ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "bluetooth:btframework",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
  ]

  sources =
      [ "./unittest/audio_session_unit_test/src/audio_session_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_session_service_unit_test") {
  module_out_path = module_output_path

  include_dirs = [ "./unittest/audio_session_service_unit_test/include" ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  external_deps = [
    "bluetooth:btframework",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
  ]

  sources = [ "./unittest/audio_session_service_unit_test/src/audio_session_service_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]
}

ohos_unittest("audio_tone_parser_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "./unittest/audio_tone_parser_unit_test/include",
    "../../../interfaces/inner_api/native/audiomanager/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
    "-fno-access-control",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "bluetooth:btframework",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
  ]

  sources = [ "./unittest/audio_tone_parser_unit_test/src/audio_tone_parser_unit_test.cpp" ]

  deps = [ "../../audio_policy:audio_policy_service_static" ]

  defines = [ "FEATURE_DTMF_TONE" ]
}
