# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("../../../../../../accessibility.gni")
import("../../../../../../appgallery.gni")
import("../../../../../../bluetooth_part.gni")
import("../../../../../../config.gni")

group("audio_router_unittest_packages") {
  testonly = true
  deps = [
    ":public_priority_router_unit_test",
    ":pair_device_router_unit_test",
    ":stream_filter_router_ext_unit_test",
  ]
}

module_output_path = "audio_framework/audio_framework_policy/audio_policy"

ohos_unittest("public_priority_router_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "./unittest/public_priority_router_unit_test/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "distributed_notification_service:ans_innerkits",
    "drivers_interface_audio:libaudio_proxy_5.0",
    "eventhandler:libeventhandler",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "i18n:intl_util",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/public_priority_router_unit_test/src/public_priority_router_unit_test.cpp" ]

  deps = [
    "../../../../../audio_policy:audio_policy_client",
    "../../../../../audio_policy:audio_policy_service_static",
    "../../../../../audio_service:audio_client",
    "../../../../../audio_service:audio_common",
  ]

  if (bluetooth_part_enable == true) {
    deps +=
        [ "../../../../../../frameworks/native/bluetoothclient:audio_bluetooth_client" ]
    external_deps += [ "bluetooth:btframework" ]
  }
}

ohos_unittest("pair_device_router_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "./unittest/pair_device_router_unit_test/include",
  ]

  use_exceptions = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "distributed_notification_service:ans_innerkits",
    "drivers_interface_audio:libaudio_proxy_5.0",
    "eventhandler:libeventhandler",
    "googletest:gmock",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "i18n:intl_util",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sources = [ "./unittest/pair_device_router_unit_test/src/pair_device_router_unit_test.cpp" ]

  deps = [
    "../../../../../audio_policy:audio_policy_client",
    "../../../../../audio_policy:audio_policy_service_static",
    "../../../../../audio_service:audio_client",
    "../../../../../audio_service:audio_common",
  ]

  if (bluetooth_part_enable == true) {
    deps +=
        [ "../../../../../../frameworks/native/bluetoothclient:audio_bluetooth_client" ]
    external_deps += [ "bluetooth:btframework" ]
  }
}

ohos_unittest("stream_filter_router_ext_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./unittest/stream_filter_router_unit_test/include",
    "../../../common/definitions/include",
    "../../../../../../frameworks/native/audiodefinitions/include",
    "../../../../../audio_service/common/include/dfx",
    "../../../../../audio_policy/server/include/service",
    "../../../../../audio_policy/server/include/service/listener",
    "../../../../../audio_policy/server/include/service/service",
    "../../../../../audio_policy/server/domain/device/include",
    "../../../../../audio_policy/server/domain/device/src/a2dp",
    "../../../../../audio_policy/server/include",
  ]

  use_exceptions = true
  testonly = true

  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-macro-redefined",
  ]

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken_shared",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_audio:libaudio_proxy_5.0",
    "eventhandler:libeventhandler",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "os_account:os_account_innerkits",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "accessibility:accessibility_common",
    "accessibility:accessibilityconfig",
    "ability_runtime:wantagent_innerkits",
  ]

  public_external_deps = [ "ffrt:libffrt" ]

  public_external_deps += [
    "libxml2:libxml2",
    "openssl:libcrypto_shared",
  ]

  sources = [
    "./unittest/stream_filter_router_unit_test/src/stream_filter_router_ext_unit_test.cpp",
  ]

  configs = [ "../../../../../../services/audio_policy:audio_policy_public_config" ]

  deps = [
    "../../../../../../services/audio_service/idl:audio_framework_interface",
    "../../../../../../services/audio_policy:audio_policy_client",
    "../../../../../../services/audio_policy:audio_policy_service_static",
    "../../../../../../services/audio_service:audio_client",
  ]

  defines = []

  if (build_variant == "user") {
    defines += [ "AUDIO_BUILD_VARIANT_USER" ]
  } else if (build_variant == "root") {
    defines += [ "AUDIO_BUILD_VARIANT_ROOT" ]
  }

  if (use_libfuzzer || use_clang_coverage) {
    defines += [ "TEST_COVERAGE" ]
  }

  if (audio_framework_feature_support_os_account) {
    defines += [ "SUPPORT_USER_ACCOUNT" ]
  }

  if (audio_framework_feature_dtmf_tone) {
    defines += [ "FEATURE_DTMF_TONE" ]
  }

  if (audio_framework_feature_usb_audio) {
    defines += [ "USB_ENABLE" ]
    external_deps += [ "usb_manager:usbsrv_client" ]
  }

  if (audio_framework_config_policy_enable) {
    defines += [ "USE_CONFIG_POLICY" ]
    external_deps += [ "config_policy:configpolicy_util" ]
  }

  if (bluetooth_part_enable == true) {
    deps +=
        [ "../../../../../../frameworks/native/bluetoothclient:audio_bluetooth_client" ]
    external_deps += [ "bluetooth:btframework" ]
  }

  if (audio_framework_feature_wired_audio) {
    defines += [ "AUDIO_WIRED_DETECT" ]
  }

  if (audio_framework_feature_inner_capturer) {
    defines += [ "HAS_FEATURE_INNERCAPTURER" ]
  }

  if (audio_framework_feature_offline_effect) {
    defines += [ "FEATURE_OFFLINE_EFFECT" ]
  }

  if (audio_framework_feature_distributed_audio) {
    defines += [ "FEATURE_DISTRIBUTE_AUDIO" ]
  }

  if (audio_framework_feature_file_io == true) {
    defines += [ "FEATURE_FILE_IO" ]
  }

  if (audio_framework_feature_low_latency) {
    defines += [ "SUPPORT_LOW_LATENCY" ]
  }

  if (audio_framework_feature_input) {
    defines += [ "FEATURE_MULTIMODALINPUT_INPUT" ]
    external_deps += [ "input:libmmi-client" ]
  }

  if (audio_framework_feature_device_manager) {
    defines += [ "FEATURE_DEVICE_MANAGER" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
  }

  if (bluetooth_part_enable == true) {
    cflags += [ "-DBLUETOOTH_ENABLE" ]
  }
}