# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/idl_tool/idl.gni")
import("//foundation/multimedia/audio_framework/config.gni")

audio_framework_root = "../../.."
audio_policy_idl_location = "${audio_framework_root}/services/audio_policy/idl"

idl_gen_interface("audio_service_idl_interface") {
  sources = [
    "IAudioProcess.idl",
    "ICoreServiceProviderIpc.idl",
    "IIpcStream.idl",
    "IIpcStreamListener.idl",
    "IPolicyProviderIpc.idl",
    "IProcessCb.idl",
    "IStandardAudioServerManagerListener.idl",
    "IStandardAudioService.idl",
  ]
  if (audio_framework_feature_offline_effect) {
    sources += [ "IIpcOfflineStream.idl" ]
  }
  sources_callback = []
  sources_common = [ "AudioServiceTypes.idl" ]

  # client_enable = true
  log_tag = "AudioServiceIdl"
  hitrace = "HITRACE_TAG_ZAUDIO"

  log_domainid = "0xD002B8B"

  subsystem_name = "multimedia"
  part_name = "audio_framework"
}

idl_gen_interface("audio_policy_idl_interface") {
  sources = [
    "${audio_policy_idl_location}/IAudioPolicy.idl",
    "${audio_policy_idl_location}/IAudioPolicyClient.idl",
    "${audio_policy_idl_location}/IAudioWorkgroupCallback.idl",
    "${audio_policy_idl_location}/IStandardAudioAnahsManagerListener.idl",
    "${audio_policy_idl_location}/IStandardAudioPolicyManagerListener.idl",
    "${audio_policy_idl_location}/IStandardAudioRoutingManagerListener.idl",
    "${audio_policy_idl_location}/IStandardAudioZoneClient.idl",
    "${audio_policy_idl_location}/IStandardClientTracker.idl",
    "${audio_policy_idl_location}/IStandardSleAudioOperationCallback.idl",
    "${audio_policy_idl_location}/IStandardSpatializationStateChangeListener.idl",
    "${audio_policy_idl_location}/IVADeviceBroker.idl",
    "${audio_policy_idl_location}/IVAInputStream.idl",
    "${audio_policy_idl_location}/IVADeviceController.idl",
    "${audio_policy_idl_location}/IVAStream.idl",
  ]
  sources_callback = []
  sources_common = []

  log_tag = "AudioPolicyIdl"
  hitrace = "HITRACE_TAG_ZAUDIO"

  log_domainid = "0xD002B87"

  subsystem_name = "multimedia"
  part_name = "audio_framework"
}

config("audio_framework_interface_config") {
  include_dirs = [
    "${target_gen_dir}",
    "//foundation/multimedia/audio_framework/services/audio_service/idl/",
  ]
  print("include_dirs=", include_dirs)
  print("target_gen_dir=", target_gen_dir)
}

config("audio_service_sa_idl_config") {
  include_dirs = [
    "${target_gen_dir}",
    "${audio_framework_root}/interfaces/inner_api/native/audiocommon/include/",
    "${audio_framework_root}/services/audio_service/common/include/",
    "${audio_framework_root}/frameworks/native/hdiadapter_new/include/common/",
  ]
}

config("audio_policy_sa_idl_config") {
  include_dirs = [
    "${target_gen_dir}",
    "${audio_framework_root}/interfaces/inner_api/native/audiocommon/include/",
    "${audio_framework_root}/interfaces/inner_api/native/audiomanager/include/",
    "${audio_framework_root}/frameworks/native/audiodefinitions/include/",
    "${audio_framework_root}/frameworks/native/audiopolicy/include/",
    "${audio_framework_root}/interfaces/inner_api/native/audiomanager/include/",
  ]
}

ohos_shared_library("audio_framework_interface") {
  branch_protector_ret = "pac_ret"

  public_configs = [
    ":audio_framework_interface_config",
    ":audio_service_sa_idl_config",
    ":audio_policy_sa_idl_config",
  ]

  cflags_cc = [
    "-fomit-frame-pointer",
    "-fdata-sections",
    "-ffunction-sections",
    "-fno-unroll-loops",
    "-fno-exceptions",
    "-fno-unwind-tables",
    "-fno-asynchronous-unwind-tables",
    "-Os",
  ]

  output_values = get_target_outputs(":audio_service_idl_interface")
  output_values += get_target_outputs(":audio_policy_idl_interface")

  sources = [
    "${audio_framework_root}/frameworks/native/audiodefinitions/src/audio_stream_descriptor.cpp",
    "${audio_framework_root}/services/audio_policy/server/domain/device/src/audio_device_descriptor.cpp",
    "${audio_framework_root}/services/audio_policy/server/domain/volume/src/audio_volume_group_info.cpp",
    "${audio_framework_root}/services/audio_service/client/src/audio_filter.cpp",
    "${audio_framework_root}/services/audio_service/client/src/microphone_descriptor.cpp",
    "${audio_framework_root}/services/audio_service/common/src/futex_tool.cpp",
    "${audio_framework_root}/services/audio_service/common/src/oh_audio_buffer.cpp",
    "${audio_framework_root}/services/audio_service/common/src/oh_audio_buffer_base.cpp",
  ]
  sources += filter_include(output_values, [ "*_proxy.cpp" ])
  sources += filter_include(output_values, [ "*stub.cpp" ])
  sources += filter_include(output_values, [ "*_types.cpp" ])

  deps = [
    ":audio_policy_idl_interface",
    ":audio_service_idl_interface",
    "${audio_framework_root}/frameworks/native/audioutils:audio_utils",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
}
