/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package OHOS.AudioStandard;

sequenceable audio_info..OHOS.AudioStandard.AudioProcessConfig;
sequenceable audio_device_descriptor..OHOS.AudioStandard.AudioDeviceDescriptor;
sequenceable audio_shared_memory..OHOS.AudioStandard.AudioSharedMemory;
sequenceable audio_stream_info..OHOS.AudioStandard.AudioStreamInfo;
sequenceable audio_device_descriptor..OHOS.AudioStandard.AudioCapturerInfo;

interface IPolicyProviderIpc {
    [ipccode 0] void GetProcessDeviceInfo([in] AudioProcessConfig config, [in] boolean lockFlag, [out] AudioDeviceDescriptor deviceInfo);
    void InitSharedVolume([out] sharedptr<AudioSharedMemory> buffer);
    void NotifyCapturerAdded([in] AudioCapturerInfo capturerInfo, [in] AudioStreamInfo streamInfo, [in] unsigned int sessionId);
    void NotifyWakeUpCapturerRemoved();
    void IsAbsVolumeSupported([out] boolean isSupported);
    void OffloadGetRenderPosition([out] unsigned int delayValue, [out] unsigned long sendDataSize, [out] unsigned int timeStamp);
    void NearlinkGetRenderPosition([out] unsigned int delayValue);
    void GetAndSaveClientType([in] unsigned int uid, [in] String bundleName);
    void GetMaxRendererInstances([out] int maxInstances);
    void NotifyCapturerRemoved([in] unsigned long sessionId);
    void LoadModernInnerCapSink([in] int innerCapId);
    void UnloadModernInnerCapSink([in] int innerCapId);
    void ClearAudioFocusBySessionID([in] int sessionID);
    [oneway] void CaptureConcurrentCheck([in] unsigned int sessionID);
}
