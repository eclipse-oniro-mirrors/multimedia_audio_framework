# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

ohos_shared_library("audio_engine_utils") {
  stack_protector_ret = true
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }
  install_enable = true

  sources = [
    "buffer/hpae_pcm_buffer.cpp",
    "buffer/hpae_pcm_process.cpp",
    "dfx/hpae_dfx_tree.cpp",
    "simd/simd_utils.cpp",
    "utils/hpae_format_convert.cpp",
    "utils/hpae_no_lock_queue.cpp",
    "utils/hpae_pcm_dumper.cpp",
  ]

  include_dirs = [
    "buffer",
    "simd",
    "utils",
    "dfx",
    "buffer",
    "manager/include",
    "monitor/include",
    "../audio_service/common/include",
    "../audio_service/server/include",
    "../../interfaces/inner_api/native/audiocommon/include",
    "../../frameworks/native/audioutils/include",
  ]

  cflags = [
    "-Wall",
    "-Werror",
    "-D_FORTIFY_SOURCE=2 -O2",
  ]

  deps = [
    ":audio_engine_monitor",
    "../audio_service:audio_common",
    "../../frameworks/native/audioutils:audio_utils",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
  ]

  subsystem_name = "multimedia"
  part_name = "audio_framework"
}

ohos_shared_library("audio_engine_plugins") {
  stack_protector_ret = true
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }
  install_enable = true

  sources = [
    "plugin/channel_converter/src/channel_converter.cpp",
    "plugin/channel_converter/src/down_mixer.cpp",
    "plugin/channel_converter/src/mixer_utils.cpp",
    "plugin/resample/proresampler/audio_proresampler.cpp",
    "plugin/resample/proresampler/audio_proresampler_process.c",
  ]

  include_dirs = [
    "plugin/resample/include",
    "../../interfaces/inner_api/native/audiocommon/include",
    "plugin/channel_converter/include",
  ]

  cflags = [
    "-Wall",
    "-Werror",
    "-D_FORTIFY_SOURCE=2 -O2",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
  ]

  subsystem_name = "multimedia"
  part_name = "audio_framework"
}

config("audio_engine_node_config") {
  include_dirs = [
    "node/include",
    "manager/include",
    "monitor/include",
    "buffer",
    "simd",
    "utils",
    "dfx",
    "plugin/resample/include",
    "plugin/channel_converter/include",
    "plugin/bitdepth_converter",
    "../audio_service/common/include",
    "../audio_service/common/include/limiter",
    "../audio_service/server/include",
    "../audio_policy/common/include",
    "../audio_policy/util/include",
    "../../frameworks/native/audioeffect/include",
    "../../interfaces/inner_api/native/audiocommon/include",
    "../../frameworks/native/audioclock/include",
    "../../frameworks/native/hdiadapter_new/include",
  ]

  cflags = [
    "-Wall",
    "-Werror",
    "-D_FORTIFY_SOURCE=2 -O2",
  ]
  cflags += [ "-Os" ]
  cflags += [ "-DENABLE_HOOK_PCM" ]
  cflags += [ "-DENABLE_HIDUMP_DFX" ]
  cflags_cc = cflags
}

ohos_shared_library("audio_engine_node") {
  stack_protector_ret = true
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }
  install_enable = true

  defines = []

  if (is_emulator) {
    defines += [ "IS_EMULATOR" ]
  }

  configs = [ ":audio_engine_node_config" ]

  sources = [
    "node/src/hpae_audio_format_converter_node.cpp",
    "node/src/hpae_capture_effect_node.cpp",
    "node/src/hpae_co_buffer_node.cpp",
    "node/src/hpae_gain_node.cpp",
    "node/src/hpae_inner_cap_sink_node.cpp",
    "node/src/hpae_loudness_gain_node.cpp",
    "node/src/hpae_mixer_node.cpp",
    "node/src/hpae_node_common.cpp",
    "node/src/hpae_offload_sinkoutput_node.cpp",
    "node/src/hpae_output_cluster.cpp",
    "node/src/hpae_plugin_node.cpp",
    "node/src/hpae_process_cluster.cpp",
    "node/src/hpae_render_effect_node.cpp",
    "node/src/hpae_sink_input_node.cpp",
    "node/src/hpae_sink_output_node.cpp",
    "node/src/hpae_sink_virtual_output_node.cpp",
    "node/src/hpae_source_input_cluster.cpp",
    "node/src/hpae_source_input_node.cpp",
    "node/src/hpae_source_output_node.cpp",
    "node/src/hpae_source_process_cluster.cpp",
    "node/src/hpae_remote_sink_output_node.cpp",
    "node/src/hpae_remote_output_cluster.cpp",
    "node/src/hpae_virtual_process_cluster.cpp",
  ]

  deps = [
    ":audio_engine_plugins",
    ":audio_engine_utils",
    "../../frameworks/native/audioclock:audio_clock",
    "../../frameworks/native/audioeffect:audio_effect",
    "../../frameworks/native/audioutils:audio_utils",
    "../../frameworks/native/hdiadapter_new:hdiadapter_new",
    "../audio_policy:audio_foundation",
    "../audio_service:audio_common",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
  ]

  subsystem_name = "multimedia"
  part_name = "audio_framework"
}

ohos_shared_library("audio_engine_manager") {
  stack_protector_ret = true
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }
  install_enable = true

  configs = [ ":audio_engine_node_config" ]

  include_dirs = [
    "manager/include",
    "../audio_policy/common/include",
    "../audio_policy/server/infra/datashare/include",
    "../../frameworks/native/audioeffect/include",
    "../../frameworks/native/audioqosmanager/include",
    "../../frameworks/native/audioschedule/include",
  ]

  sources = [
    "manager/src/hpae_capturer_manager.cpp",
    "manager/src/hpae_inner_capturer_manager.cpp",
    "manager/src/hpae_manager.cpp",
    "manager/src/hpae_manager_impl.cpp",
    "manager/src/hpae_offload_renderer_manager.cpp",
    "manager/src/hpae_policy_manager.cpp",
    "manager/src/hpae_renderer_manager.cpp",
    "manager/src/hpae_signal_process_thread.cpp",
    "manager/src/hpae_soft_link.cpp",
    "manager/src/i_hpae_capturer_manager.cpp",
    "manager/src/i_hpae_manager.cpp",
    "manager/src/i_hpae_renderer_manager.cpp",
    "manager/src/hpae_virtual_capturer_manager.cpp",
    "manager/src/hpae_injector_renderer_manager.cpp",
  ]

  deps = [
    ":audio_engine_node",
    ":audio_engine_utils",
    ":audio_engine_monitor",
    "../../frameworks/native/audioeffect:audio_effect",
    "../../frameworks/native/audioqosmanager:audio_qosmanager",
    "../../frameworks/native/audioschedule:audio_schedule",
    "../../frameworks/native/audioutils:audio_utils",
    "../../frameworks/native/hdiadapter_new:hdiadapter_new",
    "../audio_policy:audio_foundation",
    "../audio_policy:audio_setting_provider",
    "../audio_service:audio_common",
  ]

  external_deps = [
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "init:libbegetutil",
    "os_account:os_account_innerkits",
    "samgr:samgr_proxy",
  ]

  subsystem_name = "multimedia"
  part_name = "audio_framework"
}

ohos_shared_library("audio_engine_monitor") {
  stack_protector_ret = true
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }
  install_enable = true

  configs = [ ":audio_engine_node_config" ]

  sources = [
    "monitor/src/hpae_message_queue_monitor.cpp",
    "monitor/src/hpae_stream_move_monitor.cpp"
  ]

  external_deps = [
    "ipc:ipc_single",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "samgr:samgr_proxy",
  ]
  subsystem_name = "multimedia"
  part_name = "audio_framework"
}
