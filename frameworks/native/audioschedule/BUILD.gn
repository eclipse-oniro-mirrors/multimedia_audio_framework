# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("../../../config.gni")
import("../../../ressche_part.gni")

ohos_shared_library("audio_schedule") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
  }

  include_dirs = [
    "include",
    "../audioutils/include",
    "../../../interfaces/inner_api/native/audiocommon/include",
  ]

  sources = [ "audio_schedule.cpp" ]

  cflags = [
    "-Wall",
    "-Werror",
  ]
  cflags += [ "-Os" ]

  deps = [ "../audioutils:audio_utils" ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
    "init:libbegetutil",
    "qos_manager:concurrent_task_client",
    "qos_manager:qos"
  ]

  if (ressche_enable == true) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    cflags += [ "-DRESSCHE_ENABLE" ]
  }

  cflags_cc = cflags
  cflags_cc += [ "-std=c++20" ]

  subsystem_name = "multimedia"
  part_name = "audio_framework"
}

ohos_unittest("audioschedule_unit_test") {
  module_out_path = "audio_framework/audio_framework_route/audioschedule"

  cflags = [
    "-Wall",
    "-Werror",
    "-fno-access-control",
  ]

  include_dirs = [
    "./include",
    "../../../interfaces/inner_api/native/audiocommon/include/",
    "../audioutils/include",
  ]

  sources = [
    "test/unittest/audio_schedule_unit_test.cpp",
  ]

  deps = [ 
    ":audio_schedule",
    "../audioutils:audio_utils"
  ]

  defines = []

  external_deps = [
    "googletest:gmock",
    "googletest:gtest",
    "hilog:libhilog",
    "init:libbegetutil",
  ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}
