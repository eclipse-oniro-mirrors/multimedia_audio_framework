# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("../../../../../config.gni")

module_output_path = "audio_framework/audio_framework_engine"

config("audio_engine_private_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "./include",
    "../../include",
    "../../../audioutils/include",
    "../../../hdiadapter_new/include",
    "../../../../../interfaces/inner_api/native/audiocommon/include",
    "../../../../../services/audio_engine/manager/include",
    "../../../../../services/audio_policy/common/include",
    "../../../../../services/audio_service/common/include",
    "../../../../../services/audio_service/server/include",
  ]
}

ohos_unittest("pro_audio_service_adapter_unit_test") {
  module_out_path = module_output_path
  testonly = true
  cflags = [
    "-Wall",
    "-Werror",
    "-fno-access-control",
  ]
  sources = [ "src/pro_audio_service_adapter_unit_test.cpp" ]

  configs = [ ":audio_engine_private_config" ]

  deps = [
    "../../:pro_audio_service_adapter",
    "../../../../../services/audio_engine:audio_engine_manager",
    "../../../audioutils:audio_utils",
    "../../../hdiadapter_new:hdiadapter_new",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gtest",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("pulse_audio_service_adapter_impl_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "../../include",
    "../../../../../interfaces/inner_api/native/audiocommon/include/",
    "../../../../../frameworks/native/audioschedule/include",
    "../../../../../frameworks/native/audioutils/include",
    "../../../../../services/audio_service/server/include",
    "../../../../../services/audio_policy/common/include",
    "../../../../../services/audio_engine/manager/include",
  ]

  cflags = [
    "-Wall",
    "-Werror",
    "-fno-access-control",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock",
    "googletest:gtest",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "ipc:ipc_single",
    "media_foundation:media_monitor_client",
    "media_foundation:media_monitor_common",
    "samgr:samgr_proxy",
  ]

  sources = [
    "../../src/audio_service_adapter.cpp",
    "../../src/pro_audio_service_adapter_impl.cpp",
    "../../src/pulse_audio_service_adapter_impl.cpp",
  ]
  defines = []
  if (!audio_framework_feature_new_engine_flag) {
    external_deps += [
      "pulseaudio:pulse",
    ]

    sources += [ "pulse_audio_service_adapter_impl_unit_test.cpp"]

    defines += [ "SUPPORT_OLD_ENGINE" ]
  }
  deps = [
    "../../:pro_audio_service_adapter",
    "../../../../../frameworks/native/audioschedule:audio_schedule",
    "../../../../../frameworks/native/audioutils:audio_utils",
    "../../../../../services/audio_engine:audio_engine_manager",
    "../../../../../services/audio_service:audio_common",
  ]
}
