# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../../audio_ohcore.gni")
import("../../../config.gni")

pulseaudio_build_path = "//third_party/pulseaudio/ohosbuild"
pulseaudio_dir = "//third_party/pulseaudio"

config("audio_renderer_config") {
  include_dirs = [
    "./include",
    "../audiostream/include",
    "../../../interfaces/inner_api/native/audiorenderer/include",
    "../../../interfaces/inner_api/native/audiocommon/include",
    "../../../interfaces/inner_api/native/audiomanager/include",
    "../../../services/audio_service/client/include",
    "../../../services/audio_service/test/example",
    "$pulseaudio_dir/src",
    "$pulseaudio_dir/confgure/src",
  ]

  if (sonic_enable == true) {
    include_dirs += [ "$pulseaudio_dir/sonic" ]
  }

  cflags = [
    "-Wall",
    "-Werror",
  ]

  if (sonic_enable == true) {
    cflags += [ "-DSONIC_ENABLE" ]
  }
}

ohos_shared_library("audio_renderer") {
  sanitize = {
    cfi = true
    debug = false
    blocklist = "../../../cfi_blocklist.txt"
  }
  install_enable = true

  configs = [ ":audio_renderer_config" ]

  include_dirs = audio_gateway_include_dirs

  include_dirs += [ multimedia_audio_framework_pulse_audio ]

  sources = [
    "src/audio_renderer.cpp",
    "src/audio_renderer_proxy_obj.cpp",
  ]

  deps = [
    "../../../services/audio_policy:audio_policy_client",
    "../../../services/audio_service:audio_client",
    "../audioutils:audio_utils",
  ]

  deps += audio_renderer_gateway_deps

  if (sonic_enable == true) {
    deps += [ "$pulseaudio_dir/sonic:sonic" ]
  }

  public_configs = [ ":audio_external_library_config" ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]

  version_script = "../../../audio_framework.versionscript"
  innerapi_tags = [ "platformsdk" ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

config("audio_external_library_config") {
  include_dirs =
      [ "../../../interfaces/inner_api/native/audiorenderer/include" ]
}

group("audio_renderer_test_packages") {
  deps = [
    ":audio_interrupt_test",
    ":audio_latency_accuracy_test",
    ":audio_render_mode_callback_test",
    ":audio_renderer_test",
    ":audio_voip_test",
    ":interrupt_multi_renderer_test",
  ]
}

ohos_executable("audio_renderer_test") {
  install_enable = false

  sources = [ "test/example/audio_renderer_test.cpp" ]

  configs = [ ":audio_renderer_config" ]

  deps = [ ":audio_renderer" ]

  external_deps = [ "hilog:libhilog" ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_executable("audio_latency_accuracy_test") {
  install_enable = false

  sources = [ "test/example/audio_renderer_test.cpp" ]

  configs = [ ":audio_renderer_config" ]
  cflags = [ "-DLATENCY_ACCURACY_TEST" ]

  deps = [ ":audio_renderer" ]

  external_deps = [ "hilog:libhilog" ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_executable("audio_render_mode_callback_test") {
  install_enable = false

  sources = [ "test/example/audio_render_mode_callback_test.cpp" ]

  configs = [ ":audio_renderer_config" ]

  deps = [ ":audio_renderer" ]

  external_deps = [ "hilog:libhilog" ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_executable("audio_voip_test") {
  install_enable = false

  sources = [ "test/example/audio_voip_test.cpp" ]

  include_dirs = [
    "./include",
    "../audiostream/include",
    "../audiocapturer/include",
    "../../../interfaces/inner_api/native/audiocapturer/include",
    "../../../interfaces/inner_api/native/audiocommon/include",
    "../../../interfaces/inner_api/native/audiorenderer/include",
    "../../../services/audio_service/client/include",
    "$pulseaudio_dir/src",
    "$pulseaudio_dir/confgure/src",
  ]

  cflags = [
    "-Wall",
    "-Werror",
  ]

  configs = [ ":audio_renderer_config" ]

  deps = [
    ":audio_renderer",
    "../audiocapturer:audio_capturer",
  ]

  external_deps = [ "hilog:libhilog" ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_executable("audio_interrupt_test") {
  install_enable = false

  sources = [ "test/example/audio_interrupt_test.cpp" ]

  configs = [ ":audio_renderer_config" ]

  deps = [
    ":audio_renderer",
    "../../../services/audio_service:audio_client",
  ]

  external_deps = [ "hilog:libhilog" ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_executable("interrupt_multi_renderer_test") {
  install_enable = false

  sources = [ "test/example/interrupt_multi_renderer_test.cpp" ]

  configs = [ ":audio_renderer_config" ]

  deps = [ ":audio_renderer" ]

  external_deps = [ "hilog:libhilog" ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_executable("audio_blendmode_test") {
  install_enable = false

  sources = [ "test/example/audio_blendmode_test.cpp" ]

  configs = [ ":audio_renderer_config" ]

  include_dirs = [
    "$pulseaudio_build_path/include",
    "$pulseaudio_dir/confgure/src",
    "$pulseaudio_dir/include",
    "$pulseaudio_dir/src",
    "../../../../foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
    "../../../../utils/system/safwk/native/include",
    "../../../../commonlibrary/c_utils/base/include",
    "//third_party/bounds_checking_function/include",
  ]

  deps = [
    ":audio_renderer",
    "../../../services/audio_service:audio_client",
  ]

  external_deps = [
    "hilog:libhilog",
    "ipc:ipc_single",
  ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}
