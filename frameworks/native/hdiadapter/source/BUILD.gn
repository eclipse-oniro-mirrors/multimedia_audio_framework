# Copyright (c) 2022-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../../../config.gni")

ohos_shared_library("audio_capturer_source") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
  }
  install_enable = true
  sources = [ "primary/audio_capturer_source.cpp" ]
  cflags = [ "-fPIC" ]
  cflags += [ "-Wall" ]
  cflags += [ "-Os" ]
  cflags_cc = cflags

  include_dirs = [
    "common",
    "../common/include",
    "../manager/include",
    "../../audioutils/include",
    "../../audioeffect/include",
    "../../audioschedule/include",
    "../../../../interfaces/inner_api/native/audiocommon/include",
    "../../../../services/audio_service/common/include/",
  ]

  deps = [
    "../../../../services/audio_service:audio_common",
    "../../audioeffect:audio_effect",
    "../../audioschedule:audio_schedule",
    "../../audioutils:audio_utils",
    "../manager:hdiadapter_utils",
  ]

  external_deps = [
    "c_utils:utils",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "hdf_core:libhdf_utils",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "media_foundation:media_monitor_client",
    "samgr:samgr_proxy",
  ]
  defines = []
  if (audio_framework_feature_power_manager) {
    external_deps += [ "power_manager:powermgr_client" ]
    defines += [ "FEATURE_POWER_MANAGER" ]
  }

  part_name = "audio_framework"
  subsystem_name = "multimedia"
  version_script = "libaudio_capturer_source.versionscript"
}

ohos_shared_library("fast_audio_capturer_source") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
  }
  install_enable = true
  sources = [ "fast/fast_audio_capturer_source.cpp" ]
  cflags = [ "-fPIC" ]
  cflags += [ "-Wall" ]
  cflags += [ "-Os" ]
  cflags_cc = cflags

  include_dirs = [
    "../common/include",
    "../../../../interfaces/inner_api/native/audiocommon/include",
    "../../audioutils/include",
    "common",
  ]

  deps = [ "../../audioutils:audio_utils" ]

  external_deps = [
    "c_utils:utils",
    "drivers_interface_audio:libaudio_proxy_4.0",
    "hdf_core:libhdf_utils",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]
  defines = []
  if (audio_framework_feature_power_manager) {
    external_deps += [ "power_manager:powermgr_client" ]
    defines += [ "FEATURE_POWER_MANAGER" ]
  }

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_shared_library("bluetooth_capturer_source") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
  }
  install_enable = true

  sources = [ "bluetooth/bluetooth_capturer_source.cpp" ]

  cflags = [ "-fPIC" ]
  cflags += [ "-Wall" ]

  cflags_cc = cflags

  include_dirs = [
    "common",
    "../common/include",
    "../manager/include",
    "../../audioutils/include",
    "../../audioeffect/include",
    "../../../../interfaces/inner_api/native/audiocommon/include",
    "../../../../services/audio_service/common/include/",
  ]

  deps = [
    "../../../../services/audio_service:audio_common",
    "../../audioeffect:audio_effect",
    "../../audioutils:audio_utils",
    "../manager:hdiadapter_utils",
  ]

  external_deps = [
    "bounds_checking_function:libsec_shared",
    "c_utils:utils",
    "drivers_peripheral_bluetooth:hdi_audio_bluetooth_header",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hilog:libhilog",
    "init:libbegetutil",
    "media_foundation:media_monitor_client",
    "samgr:samgr_proxy",
  ]
  defines = []
  if (audio_framework_feature_power_manager) {
    external_deps += [ "power_manager:powermgr_client" ]
    defines += [ "FEATURE_POWER_MANAGER" ]
  }

  if (use_libfuzzer || use_clang_coverage) {
    defines += [ "TEST_COVERAGE" ]
  }

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_shared_library("remote_audio_capturer_source") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
  }
  install_enable = true
  sources = [ "remote/remote_audio_capturer_source.cpp" ]
  cflags = [ "-fPIC" ]
  cflags += [ "-Wall" ]
  cflags += [ "-Os" ]
  cflags_cc = cflags

  include_dirs = [
    "common",
    "../common/include",
    "../devicemanager/interface",
    "../../audioutils/include",
    "../../../../interfaces/inner_api/native/audiocommon/include",
  ]

  deps = [
    "../../audioutils:audio_utils",
    "../devicemanager:audio_device_manager",
  ]

  external_deps = [
    "c_utils:utils",
    "drivers_interface_distributed_audio:libdaudio_proxy_1.0",
    "hdf_core:libhdf_utils",
    "hilog:libhilog",
  ]
  defines = []
  if (audio_framework_feature_distributed_audio) {
    defines += [ "FEATURE_DISTRIBUTE_AUDIO" ]
  }

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_shared_library("remote_fast_audio_capturer_source") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
  }
  install_enable = true
  sources = [ "remote_fast/remote_fast_audio_capturer_source.cpp" ]
  cflags = [ "-fPIC" ]
  cflags += [ "-Wall" ]
  cflags += [ "-Os" ]
  cflags_cc = cflags

  include_dirs = [
    "common",
    "../devicemanager/interface",
    "../common/include",
    "../../audioutils/include",
    "../../../../interfaces/inner_api/native/audiocommon/include",
  ]

  deps = [
    "../../audioutils:audio_utils",
    "../devicemanager:audio_device_manager",
  ]

  external_deps = [
    "c_utils:utils",
    "drivers_interface_distributed_audio:libdaudio_proxy_1.0",
    "hdf_core:libhdf_utils",
    "hilog:libhilog",
  ]
  defines = []
  if (audio_framework_feature_distributed_audio) {
    defines += [ "FEATURE_DISTRIBUTE_AUDIO" ]
  }

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_shared_library("audio_capturer_file_source") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
  }
  install_enable = true

  sources = [ "file/audio_capturer_file_source.cpp" ]

  cflags = [ "-fPIC" ]
  cflags += [ "-Wall" ]

  cflags_cc = cflags

  include_dirs = [
    "common",
    "../common/include",
    "../../../../interfaces/inner_api/native/audiocommon/include",
  ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "pulseaudio:pulse",
  ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_shared_library("capturer_source_adapter") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
  }
  install_enable = true

  sources = [
    "common/capturer_source_adapter.c",
    "common/i_audio_capturer_source.cpp",
  ]

  cflags = [ "-fPIC" ]
  cflags += [ "-Wall" ]
  cflags += [ "-Os" ]

  include_dirs = [
    "common",
    "file",
    "primary",
    "remote",
    "bluetooth",
    "../common/include",
    "../devicemanager/interface",
    "../../../../interfaces/inner_api/native/audiocommon/include",
  ]

  deps = [
    ":audio_capturer_source",
    ":bluetooth_capturer_source",
  ]

  if (audio_framework_feature_file_io == true) {
    deps += [ ":audio_capturer_file_source" ]
    defines = [ "FEATURE_FILE_IO" ]
  }

  if (audio_framework_feature_distributed_audio == true) {
    deps += [
      ":remote_audio_capturer_source",
      ":remote_fast_audio_capturer_source",
    ]
    cflags += [ "-DDAUDIO_ENABLE" ]
  }

  cflags_cc = cflags
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "pulseaudio:pulse",
  ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}
